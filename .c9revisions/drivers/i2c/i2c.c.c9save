{"ts":1366959769953,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1366959777255,"patch":[[{"diffs":[[1,"void I2CInit(void) {\n\n    GPIO_InitTypeDef GPIO_InitStructure;\n\tI2C_InitTypeDef I2C_InitStructure;\n\n\t/* Enable GPIO clock */\n\tRCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);\n\n\t/* Enable UART clock */\n\tRCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C2, ENABLE);\n\n\tGPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_I2C2);\n\tGPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_I2C2);\n\n\tGPIO_InitStructure.GPIO_OType = GPIO_OType_OD;\n\tGPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;\n\tGPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;\n\tGPIO_InitStructure.GPIO_Pin = GPIO_Pin_10 | GPIO_Pin_11;\n\tGPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;\n\tGPIO_Init(GPIOB, &GPIO_InitStructure);\n\n\tI2C_InitStructure.I2C_ClockSpeed = 400000;\n\tI2C_InitStructure.I2C_Mode = I2C_Mode_I2C;\n\tI2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;\n\tI2C_InitStructure.I2C_OwnAddress1 = 0;\n\tI2C_InitStructure.I2C_Ack = I2C_Ack_Enable;\n\tI2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;\n\n\t/* Enable I2C */\n\tI2C_Cmd(I2C2, ENABLE);\n\tI2C_Init(I2C2, &I2C_InitStructure);\n}\n\nvoid I2C_start(I2C_TypeDef* I2Cx, uint8_t address, uint8_t direction) {\n\twhile (I2C_GetFlagStatus(I2Cx, I2C_FLAG_BUSY))\n\t\t;\n\tI2C_GenerateSTART(I2Cx, ENABLE);\n\twhile (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_MODE_SELECT))\n\t\t;\n\tI2C_Send7bitAddress(I2Cx, address, direction);\n\tif (direction == I2C_Direction_Transmitter) {\n\t\twhile (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))\n\t\t\t;\n\t} else if (direction == I2C_Direction_Receiver) {\n\t\twhile (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))\n\t\t\t;\n\t}\n}\n\nvoid I2C_write(I2C_TypeDef* I2Cx, uint8_t data) {\n\tI2C_SendData(I2Cx, data);\n\t// ждем I2C EV8_2 --> ask от ведомого\n\twhile (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED))\n\t\t;\n}\n\nuint8_t I2C_read_ack(I2C_TypeDef* I2Cx) {\n\tuint8_t data;\n\t// разрешаем ask после приема\n\tI2C_AcknowledgeConfig(I2Cx, ENABLE);\n\t// ждем пока ведомый передаст байт\n\twhile (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED))\n\t\t;\n\t// возвращаем принятое\n\tdata = I2C_ReceiveData(I2Cx);\n\treturn data;\n}\n\nuint8_t I2C_read_nack(I2C_TypeDef* I2Cx) {\n\tuint8_t data;\n\t//запрещаем ask после приема\n\tI2C_AcknowledgeConfig(I2Cx, DISABLE);\n\t// ждем пока ведомый передаст байт\n\twhile (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED))\n\t\t;\n\t// возвращаем принятое\n\tdata = I2C_ReceiveData(I2Cx);\n\treturn data;\n}\n\nvoid I2C_stop(I2C_TypeDef* I2Cx) {\n\t//Отправляем STOP на линию\n\tI2C_GenerateSTOP(I2Cx, ENABLE);\n}"]],"start1":0,"start2":0,"length1":0,"length2":2478}]],"length":2478,"saved":false}
{"ts":1366959808505,"patch":[[{"diffs":[[0,", ENABLE);\n}"],[1,"\n"]],"start1":2466,"start2":2466,"length1":12,"length2":13}]],"length":2479,"saved":false}
